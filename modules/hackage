#!/usr/bin/env bash

##
# sweetie-bot – Automated package repository cannibaliser
# 
# Copyright © 2013  Mattias Andrée (maandree@member.fsf.org)
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##


################################################################
# 
#  Hackage module for sweetie-bot.
# 
#  Hackage (hackage.haskell.org) is distribution independent
#  package repository for programs and libraries written in
#  Haskell.
# 
################################################################



function start
{
    statedir=/var/lib/sweetie-bot/modules/hackage
    spooldir=/var/spool/sweetie-bot/modules/hackage
    if [ ! "${UID}" = 0 ]; then # I am not root
	statedir=~/.local/var/lib/sweetie-bot/modules/hackage
	spooldir=~/.spool/sweetie-bot/modules/hackage
    fi
    
    mkdir -p "${statedir}" || exit 1
    mkdir -p "${spooldir}" || exit 1
    
    # List file of all Hackage packages
    packagelist="${spooldir}/packages"
    
    # Remove package list if empty, so we can start over
    if [ -e "${packagelist}" ]; then
	if [ ! -f "${packagelist}" ]; then
	    echo "${packagelist} exists but is not a regular file"
	    exit 1
	fi
	if [ "$(wc -l < "${packagelist}")" = 1 ]; then
	    rm -- "${packagelist}"
	fi
    fi
    
    # Get list of Hackage package if we have none
    if [ ! -e "${packagelist}" ]; then
	wget http://hackage.haskell.org/packages -O - | 
            grep -Po 'href="/package/[^>]+"' |
            sed -e 's:^href="/package/\(.*\)"$:\1:g' > "${packagelist}"
    fi
    
    # Convert all packages
    while true; do
	# Get next package
	package="$(head -n 1 < "${packagelist}")"
	if [ -z "$package" ]; then
	    rm -- "${packagelist}"
	    break
	fi
	
	# List file of all versions of current package
	versionlist="${spooldir}/versions-${package}"
	
	# Remove list and go to next package if empty
	if [ -e "${packagelist}" ]; then
	    if [ ! -f "${packagelist}" ]; then
		echo "${packagelist} exists but is not a regular file"
		exit 1
	    fi
	    if [ "$(wc -l < "${packagelist}")" = 1 ]; then
		rm -- "${packagelist}"
		continue
	    fi
	fi
	
	# Get all versions if we do not already have a list
	if [ ! -e "${versionlist}" ]; then
	    wget "http://hackage.haskell.org/package/${package}" -O - |
	        grep -Po 'href="/package/'"${package}"'-[^>]+"' |
		sed -e 's:"::g' |
		cut -d / -f 3 |
		sed -e 's:.*-::g' |
		uniq > "${versionlist}"
	fi
	
	# Convert all versions of the package
	while true; do
	    # Get next version
	    version="$(head -n 1 < "${versionlist}")"
	    if [ -z "$version" ]; then
		rm -- "${versionlist}"
		break
	    fi
	    
	    # Unspool current version (atomically)
	    tail -n $(( $(wc -l < "${versionlist}") - 1 )) < "${versionlist}" > "${versionlist}~"
	    mv -- "${versionlist}~" "${versionlist}"
	    
	    # Perform conversion
	    from_hackage "${package}" "${version}" "${statedir}" "${spooldir}"
	done
	
	# Unspool current package (atomically)
	tail -n $(( $(wc -l < "${packagelist}") - 1 )) < "${packagelist}" > "${packagelist}~"
	mv -- "${packagelist}~" "${packagelist}"
    done
}


function from_hackage
{
    package="$1"
    version="$2"
    statedir="$3"
    spooldir="$4"
    
    echo "Found hackage package ${package} version ${version}"
    
    # Download hackage page to memory
    package_site="$(wget "http://hackage.haskell.org/package/${package}-${version}" -O -)"
    if [ ! $? = 0 ]; then
	echo 'It seems that your have lost your Internet connection, or alterntively, that Hackage is down'
	exit 1
    fi
    
    # Download cabal file to memory
    cabal_file="$(wget "http://hackage.haskell.org/package/${package}-${version}/${package}.cabal" -O -)"
    if [ ! $? = 0 ]; then
	echo 'It seems that your have lost your Internet connection, or alterntively, that Hackage is down'
	exit 1
    fi
    
    # Sanitise package name
    _package="$(echo "${package,,}" )" # lower case
    pkgname="$(echo "${_package}" | sed -e 's:[^a-z0-9\._\+\-]::g' -e 's:^[\.\-]*::')" # valid symbols
    pkgname="${pkgname::64}" # the name cannot be longer than 64
    [ "${pkgname}" = "${_package}" ]
    warn_pkgname=$?
    
    # Add haskell- prefix if not a program, i.e. a library
    echo "${package_site}" | grep 'href="/packages/tag/program"' >/dev/null
    if [ ! $? = 0 ]; then
	pkgname="haskell-${pkgname}"
    fi
    
    # Get short package description
    pkgdesc="$(cat "${cabal_file}" | cabal_field synopsis)"
    
    # Get URL
    upstream="$(cat "${cabal_file}" | cabal_field homepage)"
    if [ -z "$upstream" ]; then
	upstream="http://hackage.haskell.org/package/${package}"
    fi
    
    # Get license
    license=( $(cat "${cabal_file}" | cabal_field license | fix_license) )
    
    # The scroll file that is being created
    scroll_file="${spooldir}/${package}=${version}.scroll"
    exec 10>"${scroll_file}"
    
    # Add some basic information to the scroll
    (
	echo '# -*- python -*-'
	# Justification for applying the GNUAllPermissive license:
	#   Cabal files on hackages are distributioned without an associated
	#   license. Due to the nature of the files and the wide spread use
	#   of derivations of them (including on FSDG distributions) it is
	#   reasonable to assume that they are public domain or that the authors
	#   are in agreement. These extensive changes, which in turn will be
	#   followed by manual changes, legitimate applying a new licenses,
	#   espically an all permissive one for the sake of having a license
	#   as fallback if it is rules to not be public domain.
	echo '# Copying and distribution of this file, with or without modification,'
	echo '# are permitted in any medium without royalty provided the copyright'
	echo '# notice and this notice are preserved.  This file is offered as-is,'
	echo '# without any warranty.  [GNUAllPermissive]'
	echo 'from dragonsuite import *'
	echo ''
	echo "pkgname = '${pkgname}'"
	echo "version = '${version}'"
	echo "pkgdesc = '${pkgdesc}'"
	echo "upstream = '${upstream}'"
	echo 'arch = []'
	echo -n 'freedom = SOFTWARE | MEDIA ## FIX'
	echo 'ME : set to actual freedoms!'
	echo "license = [$(make_pyarray "${license[@]}")]"
	echo "private = SUPPORTED"
    ) >&10
    
    # Close scroll file
    exec 10<&-
}


# Make a string array in Python syntax without enclusing brackets
function make_pyarray
{
    rc=""
    if [ ! $# = 0 ]; then
	for elem in "$@"; do
	    rc="${rc}, '${elem}'"
	done
	rc="${rc:2}"
    fi
    echo "${rc}"
}


# Print all words from stdin one separate lines in stdout
function vertical
{
    while read line; do
	for arg in ${line}; do
	    echo ${arg}
	done
    done
}


# Change license names to those used in Spike scrolls
function fix_license
{
    vertical | sed \
	-e 's:^BSD3$:nBSD:g' \
	-e 's:^BSD2$:sBSD:g' \
	-e 's:^BSD4$:BSD:g'
}


# Read a top-level field in a cabal file
function cabal_field
{
    sed 's:\t: :g' | awk 'BEGIN {s = 0}
    {
       if ($0 ~ "^'"$1"' *:") {s = 1}
       else if ((s == 1) && ($0 ~ "^ ")) {s = 1}
       else {s = 0}
       if (s == 1) {print $0}
    }' | sed -e ':a;N;$!ba;s:\n *: :g' | sed -e 's:^'"$1"' *\:::g' |
         sed -e 's:^ *::g' -e 's: $::g' -e 's:  *: :g'
}


function convert
{
    package_name="$1"
    spike_scroll="$2"
    
    echo 'Converting GNU/Pony Spike is currently not supported by the Hackage module'
    exit 1
}

