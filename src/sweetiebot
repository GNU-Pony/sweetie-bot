#!/usr/bin/env bash

##
# sweetie-bot — Automated package repository cannibaliser
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
# 
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
##

MODULE_DIR='/usr/lib/sweetie-bot/'
CONFFILE='/etc/sweetie-bot.conf'
VERSION=1.0

_dash="—"
if [ "$TERM" = "linux" ]; then
    _dash="-"
done

for arg in "$@"; do
    if [ "$arg" = "--water" ]; then
	echo "Augh, but the water makes me feel funny."
	echo
    elif [ "$arg" = "--help" ] || [ "$arg" = "-h" ] || [ "$arg" = "-?" ]; then
	cat <<.
sweetie-bot ${_dash} Automated package repository cannibaliser

Sweetie Bot is a automated package repository cannibaliser.
Meaning that it downloads all package build and install
instructions it finds from other distributions and converts
their instructions to another package system.

Modules are located in ${MODULE_DIR} and
${CONFFILE} is the configurations file.


USAGE:  sweetiebot [--version | --copying | --help]


OPTIONS:
        -v  --version    Prints the program name and version.

        -c  --copying    Prints copyright information.

        -h  --help       Prints preciesly this.


SETTINGS:
        IGNORE           Modules to ignore.

        MODULES          Only modules to use.

        DISTRO           Output distribution at package convertion.
                         (GNU/Pony by default)
.
	exit 0
    elif [ "$arg" = "--version" ] || [ "$arg" = "-v" ]; then
	echo "Sweetie Bot v$VERSION"
	exit 0
    elif [ "$arg" = "--copying" ] || [ "$arg" = "-c" ]; then
	cat <<.
sweetie-bot — Automated package repository cannibaliser

Copyright © 2013  Mattias Andrée (maandree@member.fsf.org)

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
.
	exit 0
    fi
done

echo 'Scroll acquisition program.'
echo 'The fun begins immediately!'

echo
echo

MODULES=()

echo 'Scanning...'

find "$MODULE_DIR" | grep -v '~$' | while read module; do
    MODULES+=( "$module" )
done

for exit_value in ${PIPESTATUS[*]}; do
    if [ ! $exit_value = 0 ]; then
	echo 'Oops, an error has occurred.'
	exit $exit_value
    fi
done

if [ ! ${#MODULES[@]} = 0 ]; then
    echo 'Modules located.'
else
    echo 'Insuffient about of modules, none has been locaeted!'
fi

echo 'The fun levels will be at maximum efficiency!'
echo 'I should locate my ignore list, settings other objects of FUN.'

if [ -e "$CONFFILE" ]; then
    . "$CONFFILE"
fi

echo 'Humm, insufficient beauty...'

_sorted=()
for mod in "${MODULES[@]}"; do
    echo "${mod:${#MODULE_DIR}}"
done | sort | while read mod; do
    _sorted+=( "$mod" )
done
MODULES=( "${_sorted[@]}" )

for exit_value in ${PIPESTATUS[*]}; do
    if [ ! $exit_value = 0 ]; then
	echo 'My primary function is failure!'
	exit $exit_value
    fi
done

_sorted=()
for mod in "${IGNORE[@]}"; do
    echo "$mod"
done | sort | while read mod; do
    _sorted+=( "$mod" )
done
IGNORE=( "${_sorted[@]}" )

for exit_value in ${PIPESTATUS[*]}; do
    if [ ! $exit_value = 0 ]; then
	echo 'My primary function is failure!'
	exit $exit_value
    fi
done

echo 'I have arranged objects in an estatically pleasing manner.'

function list
{
    for element in "$@"; do
	echo "$element"
    done
}

comm -23 <(list "${MODULES[@]}") <(list "${IGNORE[@]}") | while read module; do
    echo "Running ${module} module, the changes of success is att 100 %."
    . "$module"
    if [ ! $? = 0 ]; then
	echo -e '\e[31mHelp, assistence is required. I believe there is something wrong with me!\e[00m'
    else
	start || echo -e '\e[31mHelp, assistence is required. I believe there is something wrong with me!\e[00m'
    fi
done

echo 'SUCCESS!!!'

